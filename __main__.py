'''
# This file is part of pyemaps
# ___________________________
#
# pyemaps is free software for non-comercial use: you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public License as published by the Free Software Foundation, either 
# version 3 of the License, or (at your option) any later version.
#
# pyemaps is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pyemaps.  If not, see <https://www.gnu.org/licenses/>.
#
# Contact supprort@emlabsoftware.com for any questions and comments.
# ___________________________
'''

from copy import copy

rel_stage = 'Stable'
pyemaps_samples_dir = 'pyemaps_samples'

def copy_samples():
    '''
    Copies sample code from package directory to current diretory 
    for easy access
    '''
    import os, sys
    import shutil

    curr_dir = os.getcwd()
    
    q = str(f"Copy pyemaps samples into {pyemaps_samples_dir} in current directory?\n ")
    
    inp = input(q +"[Y/n] ")

    if inp and not inp.lower().strip()[:1] == "y":
        print("No sample code is copied!")
        sys.exit(1)

    curr_samples_dir = os.path.join(curr_dir, pyemaps_samples_dir)

    if not os.path.exists(curr_samples_dir):
        os.makedirs(curr_samples_dir)
    
    pyemaps_pkgdir = os.path.dirname(os.path.abspath(__file__))
    pkg_samples_dir = os.path.join(pyemaps_pkgdir, "samples")

    # now copy most of the files in pkg_samples_dir into curr_samples_dir
    # fetch all files
    for file_name in os.listdir(pkg_samples_dir):
        # construct full file path
        if file_name == 'si_pyemaps.py':
            continue
        source = os.path.join(pkg_samples_dir, file_name)
        destination = os.path.join(curr_samples_dir, file_name)
        
        # copy only files
        if os.path.isfile(source):
            shutil.copy(source, destination)
            print(f'Copied sample code: {file_name} in pyemaps package to {destination}')

    print(f'Run sample code by typing: \"python pyemaps_samples\<sample>\"')

if __name__ == '__main__':
    """
    Liveness test and other information of pemaps run on command line. 
    The purpose of the run run is to show diffraction patterns 
    generated by pyemaps for silicon crystal.

    Usage:
        python -m pyemaps -s (--sample)
        python -m pyemaps -c (--copyright)
        python -m pyemaps -cp (--copysamples)
        python -m pyemaps -v (--version)
        python -m pyemaps -l (--licenseactivation) <trial|prod> <empty|license token>

    """
    
    try:
        from .samples.si_pyemaps import run_si_sample
        from emaps import stem4d 
        
    except ImportError as e:
        print(f"Error importing built-in sample: {e}")
        
    import argparse
    import datetime
    import pkg_resources

    parser = argparse.ArgumentParser(description="pyemaps console script options parsing")
    
    parser.add_argument("-s", "--sample", type=bool, nargs="?", const=True, default=False, 
                        help="for running sample code", required=False)
    parser.add_argument("-c", "--copyright", type=bool, nargs="?", const=True, default=False, 
                        help="for checking copyright", required=False)
    parser.add_argument("-v", "--version", type=bool, nargs="?", const=True, default=False, 
                        help="for checking pyemaps version", required=False)
    parser.add_argument("-cp", "--copysamples", type=bool, nargs="?", const=True, default=False, 
                        help="for copying sample code into working directory", required=False)
    parser.add_argument("-l", 
                        "--license", 
                        nargs='+',  
                        help="License activation for full package with 4D STEM features. Use empty option value for 7 days trial license", 
                        required=False
                        )
   
    try:
        args = parser.parse_args()
    except argparse.ArgumentTypeError as e:
        print(f"Argument validation error: {e}")
        parser.print_help()
        exit(1)
    except SystemExit as e:
        print(f"Parsing failed with exit code {e}. Invalid input or argument format.")
        parser.print_help()
        exit(1)

    ver = pkg_resources.require("pyemaps")[0].version + str(f" {rel_stage}")
    
    copyrit = ['Pyemaps - Transmission Electron Diffraction Simulations In Python']
    copy1 = 'Copyright @ 2021 - ' + datetime.date.today().strftime('%Y') + ' EMLab Solutions, Inc. All Rights Reserved'
    copyrit.append(copy1)
    scopyrit = '\n'.join(copyrit)

    if args.version:
        print(f'pyemaps {ver}')
        exit(0)
    elif args.copyright: 
        print(scopyrit)
        exit(0)  
    else:
        copyrit.append('Version  ' + ver)
        copyrit.append('--------------------------------')
        print('\n'.join(copyrit)) 
          
        if args.copysamples:
            copy_samples()
            exit(0)
        
        if args.sample:
            run_si_sample()
            exit(0)
        
        if args.license:
            from emaps import PKG_TYPE

            if PKG_TYPE == TYPE_FREE:
                print(f'License activation is only required for a full pyemaps package with 4DSTEM features')
                print(f'Contact support@emlabsoftware.com for how to download and install the full package')
                exit(0)

            lic_args = args.license
            if len(lic_args) <= 0 or len(lic_args) > 2:
                print(f"License handling error: {lic_args}")
                parser.print_help()
                exit(1)

            lic_type = lic_args[0]

            lic_token = None
            if len(lic_args) == 2:
                lic_token = lic_args[1]

            # offline license activation if token is given as the third arguement
            if lic_token is not None:
                ret = stem4d.activate_license_offline_once(lic_token)
            elif lic_type == "trial":
                ret = stem4d.activate_license_once()
            exit(0)
    
    