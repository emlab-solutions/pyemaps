'''
# This file is part of pyemaps
# ___________________________
#
# pyemaps is free software for non-comercial use: you can 
# redistribute it and/or modify it under the terms of the GNU General 
# Public License as published by the Free Software Foundation, either 
# version 3 of the License, or (at your option) any later version.
#
# pyemaps is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pyemaps.  If not, see <https://www.gnu.org/licenses/>.
#
# Contact supprort@emlabsoftware.com for any questions and comments.
# ___________________________
'''

from copy import copy

rel_stage = 'Stable'
pyemaps_samples_dir = 'pyemaps_samples'

def copy_samples():
    '''
    Copies sample code from package directory to current diretory 
    for easy access
    '''
    import os, sys
    import shutil

    curr_dir = os.getcwd()
    
    q = str(f"Copy pyemaps samples into {pyemaps_samples_dir} in current directory?\n ")
    
    inp = input(q +"[Y/n] ")

    if inp and not inp.lower().strip()[:1] == "y":
        print("No sample code is copied!")
        sys.exit(1)

    curr_samples_dir = os.path.join(curr_dir, pyemaps_samples_dir)

    if not os.path.exists(curr_samples_dir):
        os.makedirs(curr_samples_dir)
    
    pyemaps_pkgdir = os.path.dirname(os.path.abspath(__file__))
    pkg_samples_dir = os.path.join(pyemaps_pkgdir, "samples")

    # now copy most of the files in pkg_samples_dir into curr_samples_dir
    # fetch all files
    for file_name in os.listdir(pkg_samples_dir):
        # construct full file path
        if file_name == 'si_pyemaps.py':
            continue
        source = os.path.join(pkg_samples_dir, file_name)
        destination = os.path.join(curr_samples_dir, file_name)
        
        # copy only files
        if os.path.isfile(source):
            shutil.copy(source, destination)
            print(f'Copied sample code: {file_name} in pyemaps package to {destination}')

    print(f'Run sample code by typing: \"python pyemaps_samples\<sample>\"')

# def generateLicRequest(licDir, licToken):
#     '''
#     This is a routine called by installer just before it is findishing
#     the package installation to generate a license request.

#     The call takes a license identifier string generated by EMLab Solutions
#     ans entered by users in during the installation. 

#     The generated request file will then be sent to the company via user email
#     before a license is generated and then sent to user for application 
#     activation
#     '''
#     import os
    
#     if not os.path.exists(licDir):
#         try:
#             os.makedirs(licDir, exist_ok=True)
#         except OSError as e:
#             return 2
        
#     # -----Current license provider is by license spring
#     import licensespring
#     from licensespring.api import APIClient

#     licensespring.app_version = "CEOP 1.0.0.1"
#     PRODUCT_KEY = "CEOP-240001"
#     API_KEY = "39df7b48-235e-445d-8bc4-0f5becdd2510"
#     SHARED_API_KEY = "gPg9QKsqeX6FGi_DF21BkNeZ3YxtEgOejWewxZvC2A8"

#     api_client = APIClient(api_key=API_KEY, shared_key=SHARED_API_KEY)
#     try:
#         activation_offline_data = api_client.activate_offline_dump(product=PRODUCT_KEY, license_key=licToken)
#     except Exception as e:
#         print(f'Failed to generate license request')
#         return 3
    
#     licRequest = os.path.join(licDir, 'activate_offline.req')

#     try:
#         with open(licRequest, mode='w') as f:
#             print(activation_offline_data, file=f)
#     except Exception as e:
#          print(f'Failed to generate license request')
#          return 4
    
#     print(f'License request file generated: {licRequest}')
#     return 0

# def validate_license_option(args):
    
#     # print(f'validating license arguement: {args}')
#     if isinstance(args, str):
#         args = [args]

#     first_arg = args[0]
    
#     if first_arg not in ['trial', 'prod']:
#         raise argparse.ArgumentTypeError("First argument must be either 'trial' for trial license or 'prod' for paid product license.")

#     # When the first argument is "trial", the second argument can be absent or a string.
#     if first_arg == 'trial':
#         if len(args) == 2 and len(args[1]) <= 0:  # If provided, validate length (optional length check here)
#             raise argparse.ArgumentTypeError("Second argument for 'trial' must be a string of length 5 or empty.")
    
#     # When the first argument is "product", the second argument is mandatory and must be a string of length 5.
#     elif first_arg == 'prod':
#         if len(args) != 2 or len(args[1]) <= 0:
#             raise argparse.ArgumentTypeError("Second argument for 'product' must be a string of length 5.")
    
#     else:
#         raise argparse.ArgumentTypeError("First argument must be either 'trial' or 'product'.")
#     print(f'Returned args list: {args}')
#     return args

# def validate_license_option(args):
#     if args[0] not in ['trial', 'prod']:
#         raise argparse.ArgumentTypeError("First argument must be either 'trial' for trial license or 'prod' for paid product license.")
#     if args[1] and len(args[1]) <= 0:  # For example, restricting the second argument to 5 characters
#         raise argparse.ArgumentTypeError("Second argument must be a string of length greater than 0 or empty.")
    
#     if args[0] == 'prod' and len(args[1]) <= 0:
#         raise argparse.ArgumentTypeError("Paid product license must have its token value.")
    
#     return args

if __name__ == '__main__':
    """
    Liveness test and other information of pemaps run on command line. 
    The purpose of the run run is to show diffraction patterns 
    generated by pyemaps for silicon crystal.

    Usage:
        python -m pyemaps -s (--sample)
        python -m pyemaps -c (--copyright)
        python -m pyemaps -cp (--copysamples)
        python -m pyemaps -v (--version)
        # python -m pyemaps -lr (--licenserequest)
        python -m pyemaps -l (--licenseactivation) <trial|prod> <empty|license token>
    """
    LIC_TOKEN_LENGHT=19
    try:
        from .samples.si_pyemaps import run_si_sample
        from emaps import stem4d 
        
    except ImportError as e:
        print(f"Error importing built-in sample: {e}")
        
    import argparse
    import datetime
    import pkg_resources

    parser = argparse.ArgumentParser(description="pyemaps console script options parsing")
    
    parser.add_argument("-s", "--sample", type=bool, nargs="?", const=True, default=False, 
                        help="for running sample code", required=False)
    parser.add_argument("-c", "--copyright", type=bool, nargs="?", const=True, default=False, 
                        help="for checking copyright", required=False)
    parser.add_argument("-v", "--version", type=bool, nargs="?", const=True, default=False, 
                        help="for checking pyemaps version", required=False)
    parser.add_argument("-cp", "--copysamples", type=bool, nargs="?", const=True, default=False, 
                        help="for copying sample code into working directory", required=False)
    parser.add_argument("-l", 
                        "--license", 
                        nargs='+',  
                        help="License activation for full package with 4D STEM features. Use empty option value for 7 days trial license", 
                        required=False
                        )
   
    try:
        args = parser.parse_args()
    except argparse.ArgumentTypeError as e:
        print(f"Argument validation error: {e}")
        parser.print_help()
        exit(1)
    except SystemExit as e:
        print(f"Parsing failed with exit code {e}. Invalid input or argument format.")
        parser.print_help()
        exit(1)

    ver = pkg_resources.require("pyemaps")[0].version + str(f" {rel_stage}")
    
    copyrit = ['Pyemaps - Transmission Electron Diffraction Simulations In Python']
    copy1 = 'Copyright @ 2021 - ' + datetime.date.today().strftime('%Y') + ' EMLab Solutions, Inc. All Rights Reserved'
    copyrit.append(copy1)
    scopyrit = '\n'.join(copyrit)

    if args.version:
        print(f'pyemaps {ver}')
        exit(0)
    elif args.copyright: 
        print(scopyrit)
        exit(0)  
    else:
        copyrit.append('Version  ' + ver)
        copyrit.append('--------------------------------')
        print('\n'.join(copyrit)) 
          
        if args.copysamples:
            copy_samples()
            exit(0)

        # if args.copyright:
        #     print(scopyrit)
        #     exit(0)
        
        if args.license:
            lic_args = args.license
            if len(lic_args) <= 0 or len(lic_args) > 2:
                print(f"License handling error: {lic_args}")
                parser.print_help()
                exit(1)

            lic_type = lic_args[0]
            # print(f'License type: {lic_args} and is a list type: {isinstance(lic_args, list)}')

            lic_token = None
            if len(lic_args) == 2:
                lic_token = lic_args[1]

            # offline license activation if token is given as the third arguement
            if lic_token is not None:
                ret = stem4d.activate_license_offline_once(lic_token)
            elif lic_type == "trial":
                ret = stem4d.activate_license_once()
            exit(0)
    

    # if lacode is not None and len(lacode) == LIC_TOKEN_LENGHT:
    #     ret = stem4d.activate_license_offline_once(lacode)
    #     # exit(ret)
    # elif lacode is None or len(lacode) == 0:
    #     ret = stem4d.activate_license_once()
    #     # exit(ret)
    # else:
    #     print('Error parsing --licenseactivation option value')
    
    