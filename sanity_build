import os, sys
import argparse
    
def get_os():
    import platform
    osname = platform.platform().lower()
    if  'windows' in osname:
        return 1
    elif 'linux' in osname:
        return 2
    
    return 0
    
    
# def write_xyz(xyzdict, fn):
#         if 'xyz' not in xyzdict:
#             return -1
#         xyzlist = xyzdict['xyz']

#         if 'cell' not in xyzdict:
#             return -1
#         slines = []
#         nxyz = len(xyzlist)
        
#         try:
#             with open(fn, 'w') as f:
#                 slines.append(str(nxyz))
#                 c0, c1, c2, c3, c4, c5 = xyzdict['cell']
#                 slines.append(str(f'{c0} {c1} {c2} {c3} {c4} {c5}'))         
#                 for xyz in xyzlist:
                    
#                     s, x, y, z = xyz['symb'], xyz['x'], xyz['y'], xyz['z']
#                     sx = '{0: < #014.10f}'. format(float(x))
#                     sy = '{0: < #014.10f}'. format(float(y))
#                     sz = '{0: < #014.10f}'. format(float(z))
#                     slines.append(str(f'{s:<10}\t{sx} {sy} {sz}'))
                    
#                 f.writelines('\n'.join(slines))
#         except (FileNotFoundError, IOError) as e:
#             print(f'Error writing xyz data file {fn}')
#             return -1
#         except Exception:
#             return -1
#         else:
#             return 0

def test_xyz():
    from pyemaps import Crystal as cr
    from pyemaps import CrystalClassError, MxtalError
    try:
        si = cr.from_builtin('Silicon')
        if si:
            print(f'crytsal data to generate mxtal: {si}')
            mx = si.generateMxtal(bound=0.1)
    except (CrystalClassError, MxtalError) as e:
        print(f'error: generating mxtal data1: {e.message}')
    except Exception as e:
        print(f'error: generating mxtal data2: cause unknown')
    else:
        print(f'successfully generated mxtal: {mx}')
        ret = si.write_xyz(mx, "mx.xyz")

        if ret != 0:
            print(f'failed to write data: {mx} to file')

def test_bimgwrite():
    from pyemaps import Crystal as cr
    from pyemaps import CrystalClassError, BlochError
    try:
        si = cr.from_builtin('Silicon')
        if si:
            print(f'crytsal data loaded: {si}')
            bimgs = si.generateBlochImgs(bSave=True)

    except (CrystalClassError, BlochError) as e:
        print(f'error: generate and write bloch image data: {e.message}')
    except Exception as e:
        print(f'error: generate and write bloch image data: {e}')
    else:
        print(f'crytsal data loaded: {si}')
        print(f'successfully generated and write bloch images')

def test_dpgen():
    from pyemaps import Crystal as cr
    from pyemaps import CrystalClassError
    try:
        si = cr.from_builtin('Silicon')
        if si:
            print(f'crytsal data loaded: {si}')
            ret = si.dp_gen()

    except (CrystalClassError) as e:
        print(f'error: generate and write bloch image data: {e.message}')
    except Exception as e:
        print(f'error: generate and write bloch image data: cause unknown')
    else:
        print(f'success!')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Build and publish script for pyeamps")
    parser.add_argument("-nb", "--no-build", action="store_true", help="no build", required=False)
    args = parser.parse_args()   
    print(f'Arguement: {args.no_build}')

    os_type = get_os()
    if os_type == 1: #windows
        mypy = 'python'
        mywhl = 'dist\pyemaps-3.1.2-cp37-cp37m-win_amd64.whl'
    elif os_type == 2:
        mypy = 'python3'
        mywhl = 'dist/pyemaps-3.1.2-cp37-cp37m-linux_x86_64.whl'
    else:
        print(f'OS unsupported')
        raise BlochError('Unsupported OS')

    if not args.no_build:    
        os.system(mypy + " -m pip uninstall -y pyemaps")
        os.system(mypy +" build_pyemaps -c all -t")

        os.system(mypy + " -m pip install " + mywhl)

    test_xyz()
    # test_bimgwrite()
    # test_dpgen()