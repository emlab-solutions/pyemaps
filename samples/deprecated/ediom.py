"""
This file is part of pyemaps
___________________________

pyemaps is free software for non-comercial use: you can 
redistribute it and/or modify it under the terms of the GNU General 
Public License as published by the Free Software Foundation, either 
version 3 of the License, or (at your option) any later version.

pyemaps is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with pyemaps.  If not, see <https://www.gnu.org/licenses/>.

Contact supprort@emlabsoftware.com for any questions and comments.
___________________________

Author:     EMLab Solutions, Inc.
Date:       April 02, 2023  

This sample code is to demostrate using pyemaps' dpgen and 4dstem 
modules named stem4d to search and index experimental diffraction patterns images. 
This script is for demonstration and only support crystal with 
space group 225. 

The full feature with complete crystal system support is available in
pyemaps full package and for purchase. Contact:
    support@emlabsoftware.com 
for price information.

"""
import os
from pathlib import Path
from pyemaps import EMC

current_file = Path(os.path.abspath(__file__))
samples_path = current_file.parent.absolute()

class ediom:

    def __init__(self, xImgFn, 
                 zn=(0,0,1), res = 200, xa=(2,0,0), 
                 crystal_name = "Aluminium"):
        """
        This is a constructor for Electron diffraction Indexing and Orientation class. 

        :param xImgFn: experimental stack image (3D) file name
        :type xImgFn: String
        :param crystal_name: crystal name from builtin list
        :type crystal_name: String
        :raise CellValueError: if cell data validations fail.

        """
        # experimental file must exits
        # if not os.path.isfile(xImgFn):
        #     raise FileNotFoundError(f"The file '{xImgFn}' does not exist.")
        
        # self.xImgFile = xImgFn
        # self.crystal_name = crystal_name
        setattr(self, 'xImgFile', xImgFn)
        setattr(self, 'cname', crystal_name)
        setattr(self, 'zone', zn)
        setattr(self, 'resolution', res)
        setattr(self, 'xaxis', xa)

@property
def xImgFile(self):
    return self.xImgFile

@property
def cname(self):
    return self.cname

@property
def zone(self):
    return self.zone

@property
def resolution(self):
    return self.resolution

@property
def xaxis(self):
    return self.xaxis


def getDBFile():
    '''
    Loads pre-generated diffraction patterns database file
    '''
    return os.path.join(samples_path, "al_db.bin")

def getDPImageFn():
    '''
    Imports sample experimental diffraction pattern image
    with an 8-bytes header. 
    '''
    return os.path.join(samples_path, 'al.img')

def test_dp_indexing(cname = 'Aluminium'):
    '''
    Searches and indexes imported diffraction pattern images
    by theoretical diffraction patterns generated by pyemaps.
    '''
    from pyemaps import Crystal as cr
    from pyemaps import StackImage, XDPImageError
   
    cryst = cr.from_builtin(cname)

    # ------------load existing DP database from file-----------------
    # dbfn = getDBFile()

    # or 
        # ------------generate a new DP database file --------------

    xa0=(2,0,0)
    res = 200
    ret, dbfn = cryst.generateDPDB(emc=EMC(zone=(0,0,1)), res = res, xa = xa0)

    if ret != 0:
        print(f'failed to generate a diffraction patterns databaes')
        return -1

    # ret, mr, mc =cryst.loadDPDB(dbfn = dbfn, bShowDBMap=True)
    
    # if ret != 0 or mr <= 0 or mc <=0:
    #     print(f"Error loading DP database from file {dbfn} into stem4d module")
    #     cryst.release_stem4d()
    #     exit(1)

    xifn = getDPImageFn()
    alimg = StackImage(xifn)
    try:
      
    # DPs or peaks search and indexing parameters 
    # See pyemaps documents for explanation of the parameters
        alimg.indexImage(dbfn,
                        cc                 = 29.0,                 # Camera constant
                        sigma              = 3.0,                  # Peak width measurement
                        img_center         = (99.923, 99.919),     # Image or DP image center location
                        rmin               = 10,                   
                        search_box         = 10.0,
                        scaling_option     = (1,2), 
                        filter_threshold   = 0.0,
                        peak_threshold     = 0.8)
        
    except XDPImageError as e:
        print(f'Error indexing image {e.message}')
        return

    
    # display diffractiom pattern in the database that best match the image pattern
    StackImage.showMatchedDBDP()

    # show stereo projection location that corresponds to the matched diffraction pattern
    # StackImage.showMatchingIndexMap(mr, mc)

    # print match diffraction details
    # StackImage.printDPIndexDetails()

    # release stem4d module memory.
    # StackImage.release_stem4d()


if __name__ == '__main__':
    
    test_dp_indexing()
    